#==============================================================================
# Un fichier template (ou pattern dans wapiti) est un fichier dans lequel on
# recense tous les patrons de features qui seront instanciés au lancement.
#
# Grammaire des patrons de feature (PAS nécessaire) :
#   note : \[ et \] sont les caractères [ et ] respectivement.
#          s'ils sont écrits sans, il s'agit alors d'une définition de classe
#
# Patron      ::= Type:Identifiant=%Chainebrute\[Entier,Naturel\]
#               | Type:Identifiant=%Regextype\[Entier,Naturel,Regex\]
# Type        ::= (b|u)
# Identifiant ::= .+
# Chainebrute ::= x
# Regextype   ::= (m|t)
# Entier      ::= (0|-?[1-9][0-9]*)
# Naturel     ::= (0|[1-9][0-9]*)
# Regex       ::= \".+\" (cf wapiti-1.3.0/src/pattern.c, l. 41 pour plus d'infos)
#
# expression "compilée" : ((b|u):.+=%x\[(0|-?[1-9][0-9]*),(0|[1-9][0-9]*)]|(b|u):.+=%(m|t)\[(0|-?[1-9][0-9]*),(0|[1-9][0-9]*),\".+\"\])
# utilisable par la commande : grep -P -i "<<expression>>" nom_de_fichier
#
# exemples :
#     u:foo=%x[0,0]
#     u:bar=%t[-42,73,"-"]
#   - foo est une feature unigramme qui regarde le mot courant.
#   - bar est une feature bigramme qui regarde si, 42 tokens auparavant, la
#     colonne 73 contient un tiret.
#
# /!\ Prudence /!\ :
#   si on donne une colonne qui dépasse le nombre de colonne qu'il nous est
#   autorisé de regarder (nombre_de_colonnes - 1), le programme va planter.
#
# On peut mettre des commentaires dans un fichier template avec le caractère #
#==============================================================================




#==============================================================================
# Les features unigrammes.
# On donne un patron de feature unigramme en commençant la ligne par la lettre
# u
#==============================================================================

# %x renvoie la chaîne.



u:mot_-1=%x[-1,6]
u:mot_+0=%x[0,6]
u:mot_+1=%x[+1,6]


u:lemme_-1=%x[-1,1]
u:lemme_+0=%x[0,1]
u:lemme_+1=%x[1,1]
u:lemme_+0=%x[0,1]/u:lemme_-1=%x[-1,1]/u:lemme_+1=%x[1,1]
u:lemme_+0=%x[0,1]/u:lemme_-1=%x[-1,1]
u:lemme_-1=%x[-1,1]/u:lemme_+1=%x[1,1]
u:lemme_-1=%x[-1,1]/u:lemme_+0=%x[0,1]



#u:ttpos_-1=%x[-1,2]
#u:ttpos_+0=%x[0,2]
#u:ttpos_+1=%x[1,2]

u
b


# %m renvoie la sous-chaîne correspondant à l'expression régulière.
# Attention, pas d'espace entre la dernière virgule et l'expression régulière !
#


u:derniers_4_-1=%m[-1,0,".?.?.?.?$"]
u:derniers_4_+0=%m[0,0,".?.?.?.?$"]
u:derniers_4_+1=%m[1,0,".?.?.?.?$"]

u:derniers_3_-1=%m[-1,0,".?.?.?$"]
u:derniers_3_+0=%m[0,0,".?.?.?$"]
u:derniers_3_+1=%m[1,0,".?.?.?$"]

u:derniers_2_-1=%m[-1,0,".?.?$"]
u:derniers_2_+0=%m[0,0,".?.?$"]
u:derniers_2_+1=%m[1,0,".?.?$"]

u:derniers_1_-1=%m[-1,0,".?$"]
u:derniers_1_+0=%m[0,0,".?$"]
u:derniers_1_+1=%m[1,0,".?$"]

u:dernierslemmes_4_-1=%m[0,1,".?.?.?.?$"]
u:dernierslemmes_4_+0=%m[-1,1,".?.?.?.?$"]
u:dernierslemmes_4_+0=%m[1,1,".?.?.?.?$"]

u:dernierslemmes_3_-1=%m[0,1,".?.?.?$"]
u:dernierslemmes_3_+0=%m[-1,1,".?.?.?$"]
u:dernierslemmes_3_+1=%m[1,1,".?.?.?$"]

u:dernierslemmes_2_-1=%m[0,1,".?.?$"]
u:dernierslemmes_2_+0=%m[-1,1,".?.?$"]
u:dernierslemmes_2_+1=%m[1,1,".?.?$"]

u:dernierslemmes_1_-1=%m[0,1,".?$"]
u:dernierslemmes_1_+0=%m[-1,1,".?$"]
u:dernierslemmes_1_+1=%m[1,1,".?$"]

u:lemme_propre_+0=%m[0,1,"^.*_"]
u:lemme_propre_-1=%m[-1,1,"^.*_"]
u:lemme_propre_+1=%m[1,1,"^.*_"]


u:caracteristiques_du_lemme_+0=%m[0,1,"_.*$"]
u:caracteristiques_du_lemme_-1=%m[-1,1,"_.*$"]
u:caracteristiques_du_lemme_+1=%m[1,1,"_.*$"]



# %t renvoie si la chaîne vérifie l'expression régulière ou non.
# Attention, pas d'espace entre la dernière virgule et l'expression régulière !
#

u:commence_par_majuscule_-1=%t[-1,0,"^\u"]
u:commence_par_majuscule_+0=%t[0,0,"^\u"]
u:commence_par_majuscule_+1=%t[1,0,"^\u"]

u:fini_par_caractere_special_-1=%t[-1,0,"\W$"]
u:fini_par_caractere_special_+0=%t[0,0,"\W$"]
u:fini_par_caractere_special_+1=%t[1,0,"\W$"]

u:commence_pas_par_lettre_ou_chiffre_-1=%t[-1,0,"^\W"]
u:commence_pas_par_lettre_ou_chiffre_+0=%t[0,0,"^\W"]
u:commence_pas_par_lettre_ou_chiffre_+1=%t[1,0,"^\W"]

u:lemme_inconnu_-1=%t[-1,1,"<nolem>"]
u:lemme_inconnu_+0=%t[0,1,"<nolem>"]
u:lemme_inconnu_+1=%t[1,1,"<nolem>"]

u:lemme_inconnu_-1=%t[-1,1,"<nolem>"]|u:lemme_inconnu_+0=%t[0,1,"<nolem>"]|u:lemme_inconnu_+1=%t[1,1,"<nolem>"]



#==============================================================================
# Il est également possible de donner des features bigrammes !
#
# Il suffit d'écrire en début de ligne la lettre b
# Peut rallonger grandement le temps d'apprentissage, raison pour laquelle il
# n'y en a pas ici.
#==============================================================================